type Shop {
    id: ID!

    name: String!

    organization_id: ID!

    organization: Organization!

    employees: [Employee!]! @belongsToMany @orderBy(column: "id", direction: DESC)
}

input CreateShopEmployees {
    connect: [ID!] @rules(apply: ["required", "uuid", "exists:employees,id"]) @rulesForArray(apply: ["max:1024"])
}

input UpdateShopEmployees {
    sync: [ID!] @rules(apply: ["required", "uuid", "exists:employees,id"]) @rulesForArray(apply: ["max:1024"])
}

extend type Query @guard {
    shops(
        organization_id: ID! @eq @rules(apply: ["required", "uuid"])
    ): [Shop!]! @all @orderBy(column: "id", direction: DESC)

    shop(
        id: ID! @eq @rules(apply: ["required", "uuid"])
    ): Shop @find
}

extend type Mutation @guard {
    createShop(
        name: String! @rules(apply: ["required", "string", "max:255"])

        organization_id: ID! @rules(apply: ["required", "uuid", "exists:organizations,id"])

        employees: CreateShopEmployees
    ): Shop @create

    updateShop(
        id: ID! @rules(apply: ["required", "uuid"])

        name: String @rules(apply: ["sometimes", "required", "string", "max:255"])

        employees: UpdateShopEmployees
    ): Shop @update

    deleteShop(
        id: ID! @eq @rules(apply: ["required", "uuid"])
    ): Shop @delete
}
